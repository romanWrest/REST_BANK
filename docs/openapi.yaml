openapi: 3.0.1
info:
  title: Bank Card API
  description: API for managing bank cards
  contact:
    name: Junior Dev Team
  version: '1.0'
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - bearerAuth: []
tags:
  - name: Transfer API
    description: API для выполнения переводов между банковскими картами
  - name: Card Management API
    description: API для управления банковскими картами пользователей
  - name: User API
    description: API для управления информацией о пользователях
  - name: Authentication API
    description: API для аутентификации и регистрации пользователей
paths:
  /api/transfer:
    post:
      tags:
        - Transfer API
      summary: Выполнить перевод
      description: Выполняет перевод средств между картами пользователя.
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferDTO'
        required: true
      responses:
        '200':
          description: Перевод успешно выполнен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponseDTO'
        '400':
          description: Недостаточно средств или карта заблокирована(BLOCK, EXPIRED)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponseDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponseDTO'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponseDTO'
      security:
        - bearerAuth: []
  /api/cards/create:
    post:
      tags:
        - Card Management API
      summary: Создать новую карту
      description: Создаёт новую банковскую карту для пользователя. Доступно только администратору.
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateDTO'
        required: true
      responses:
        '201':
          description: Карта успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          description: Неверные данные в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '409':
          description: Карта с такими данными уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
      security:
        - bearerAuth: []
  /api/auth/sign-in:
    post:
      tags:
        - Authentication API
      summary: Вход в систему
      description: Аутентифицирует пользователя и возвращает JWT-токен.
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignInDTO'
        required: true
      responses:
        '200':
          description: Успешная аутентификация, токен возвращён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationDto'
        '400':
          description: Неверные данные в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationDto'
        '401':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationDto'
  /api/auth/registration:
    post:
      tags:
        - Authentication API
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя и возвращает данные пользователя.
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterDTO'
        required: true
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Неверные данные в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '409':
          description: Пользователь с такими данными уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
  /api/auth/refresh-token:
    post:
      tags:
        - Authentication API
      summary: Обновление токена
      description: Обновляет JWT-токен на основе предоставленного refresh-токена.
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDto'
        required: true
      responses:
        '200':
          description: Токен успешно обновлён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationDto'
        '400':
          description: Неверный refresh-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationDto'
        '401':
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationDto'
  /api/cards/status:
    patch:
      tags:
        - Card Management API
      summary: Изменить статус карты
      description: Позволяет администратору изменить статус банковской карты (ACTIVE, BLOCK, EXPIRED).
      operationId: setStatusCard
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum:
              - ACTIVE
              - BLOCK
              - EXPIRED
      responses:
        '200':
          description: Статус карты успешно изменён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardSetStatusResponseDTO'
        '400':
          description: Неверные данные в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardSetStatusResponseDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardSetStatusResponseDTO'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardSetStatusResponseDTO'
      security:
        - bearerAuth: []
  /api/cards/block/{id}:
    patch:
      tags:
        - Card Management API
      summary: Запрос на блокировку карты
      description: Отправляет запрос на блокировку карты по её ID. Доступно для авторизованных пользователей.
      operationId: requestToBlockCard
      parameters:
        - name: id
          in: path
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Запрос на блокировку успешно отправлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseBlockDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseBlockDTO'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseBlockDTO'
      security:
        - bearerAuth: []
  /api/users/{id}:
    get:
      tags:
        - User API
      summary: Получить пользователя по ID
      description: Возвращает информацию о пользователе по его ID. Доступно только администратору.
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Информация о пользователе успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
      security:
        - bearerAuth: []
  /api/users/self:
    get:
      tags:
        - User API
      summary: Получить текущего пользователя
      description: Возвращает информацию о текущем авторизованном пользователе.
      operationId: getCurrentUser
      responses:
        '200':
          description: Информация о пользователе успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
      security:
        - bearerAuth: []
  /api/users/all:
    get:
      tags:
        - User API
      summary: Получить всех пользователей
      description: Возвращает список всех пользователей с пагинацией. Доступно только администратору.
      operationId: getAllUsers
      parameters:
        - name: pageable
          in: query
          description: Параметры пагинации (page, size, sort)
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Список пользователей успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUserDTO'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUserDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUserDTO'
      security:
        - bearerAuth: []
  /api/cards/{id}:
    get:
      tags:
        - Card Management API
      summary: Получить карту по ID
      description: Возвращает информацию о карте по её ID. Доступно для авторизованных пользователей.
      operationId: getCard
      parameters:
        - name: id
          in: path
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Карта успешно найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
      security:
        - bearerAuth: []
  /api/cards/{id}/userCards:
    get:
      tags:
        - Card Management API
      summary: Получить карты пользователя
      description: Возвращает список карт, принадлежащих пользователю, с пагинацией. Доступно только администратору.
      operationId: getUserCards
      parameters:
        - name: id
          in: path
          description: ID пользователя
          required: true
          schema:
            type: integer
            format: int64
        - name: pageable
          in: query
          description: Возвращает список карт, принадлежащих авторизованному пользователю, с пагинацией.
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Список карт успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDTO'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDTO'
      security:
        - bearerAuth: []
  /api/cards/{id}/balance:
    get:
      tags:
        - Card Management API
      summary: Получить баланс карты
      description: Возвращает баланс карты по её ID. Доступно для авторизованных пользователей.
      operationId: getBalance
      parameters:
        - name: id
          in: path
          description: ID карты
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Баланс карты успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseBalanceDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseBalanceDTO'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponseBalanceDTO'
      security:
        - bearerAuth: []
  /api/cards/statuses/request/cards:
    get:
      tags:
        - Card Management API
      summary: Получить статусы запросов на блокировку карт
      description: Возвращает список статусов запросов на блокировку карт с пагинацией. Доступно только администратору.
      operationId: getStatusByRequestStatus
      parameters:
        - name: pageable
          in: query
          description: Параметры пагинации (page, size, sort)
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Список статусов успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardResponseRequestStatusDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardResponseRequestStatusDTO'
        '404':
          description: Ресурс не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardResponseRequestStatusDTO'
      security:
        - bearerAuth: []
  /api/cards/all:
    get:
      tags:
        - Card Management API
      summary: Получить все карты всех пользователей
      description: Возвращает список абсолютно всех банковских карт с поддержкой пагинации. Доступно только администратору.
      operationId: getAllCards
      parameters:
        - name: pageable
          in: query
          description: Параметры пагинации (page, size, sort)
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Список карт успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDTO'
        '403':
          description: Доступ запрещён
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCardDTO'
      security:
        - bearerAuth: []
  /api/cards/delete/{id}:
    delete:
      tags:
        - Card Management API
      summary: Удалить карту
      description: Удаляет банковскую карту по её ID. Доступно только администратору.
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          description: ID карты для удаления
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Карта успешно удалена
        '403':
          description: Доступ запрещён
        '404':
          description: Карта не найдена
      security:
        - bearerAuth: []
components:
  schemas:
    TransferDTO:
      required:
        - amount
        - fromCardId
        - toCardId
        - userId
      type: object
      properties:
        userId:
          type: integer
          description: ID пользователя, инициирующего перевод
          format: int64
          example: 1
        fromCardId:
          type: integer
          description: ID карты, с которой выполняется перевод
          format: int64
          example: 101
        toCardId:
          type: integer
          description: ID карты, на которую выполняется перевод
          format: int64
          example: 102
        amount:
          type: number
          description: Сумма перевода
          example: 500
      description: DTO для выполнения перевода между банковскими картами
    TransferResponseDTO:
      type: object
      properties:
        id:
          type: integer
          description: Идентификатор трансфера
          format: int64
          example: 1
        transferTime:
          type: string
          description: Время трансфера
          format: date-time
        fromCard:
          type: integer
          description: Карта отправителя
          format: int64
        toCard:
          type: integer
          description: Карта получателя
          format: int64
        amount:
          type: number
          description: Сумма трансфера
          example: 100.5
    CardCreateDTO:
      required:
        - balance
        - number
        - status
        - userId
      type: object
      properties:
        number:
          maxLength: 19
          minLength: 16
          pattern: ^(\d{4} ?){3}\d{4}$
          type: string
          description: Номер карты (16 цифр, с пробелами или без)
          example: 1234 5678 9012 3456
        balance:
          type: number
          description: Начальный баланс карты 100
          example: 100
        userId:
          type: integer
          description: ID пользователя-владельца карты
          format: int64
          example: 1
        status:
          type: string
          description: Статус карты
          example: ACTIVE
          enum:
            - ACTIVE
            - BLOCK
            - EXPIRED
      description: DTO для создания новой банковской карты
    CardDTO:
      required:
        - balance
        - expiryDate
        - id
        - maskedNumber
        - status
      type: object
      properties:
        id:
          type: integer
          description: ID карты
          format: int64
          example: 101
        maskedNumber:
          type: string
          description: Маскированный номер карты
          example: '**** **** **** 1234'
        balance:
          type: number
          description: Баланс карты
          example: 1000
        expiryDate:
          type: string
          description: Срок действия карты
          format: date
          example: '2025-12-31'
        status:
          type: string
          description: Статус карты
          example: ACTIVE
          enum:
            - ACTIVE
            - BLOCK
            - EXPIRED
      description: DTO для представления информации о банковской карте
    UserSignInDTO:
      required:
        - email
        - password
      type: object
      properties:
        email:
          maxLength: 20
          minLength: 3
          type: string
          description: Email пользователя
          example: testuser@example.com
        password:
          maxLength: 20
          minLength: 8
          type: string
          description: Пароль пользователя
          example: password123
      description: DTO для входа пользователя
    JwtAuthenticationDto:
      required:
        - refreshToken
        - token
      type: object
      properties:
        token:
          type: string
          description: JWT-токен (алгоритм HS384, содержит sub, role, exp)
          example: eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJ0ZXN0dXNlckBleGFtcGxlLmNvbSIsInJvbGUiOiJST0xFX1VTRVIiLCJleHAiOjE3NTQ0NDMwMjB9.s3iml83m36wdz447MYQ6LrNjXmtuvffZIs9U51huJxABv9rLo59I2ZJNLlKQ6nkA
        refreshToken:
          type: string
          description: Refresh-токен для обновления JWT
          example: dGhpcy1pcy1hLXJlZnJlc2gtdG9rZW4=
      description: DTO для возврата JWT-токена и refresh-токена после аутентификации
    UserRegisterDTO:
      required:
        - email
        - fullname
        - password
      type: object
      properties:
        email:
          maxLength: 20
          minLength: 3
          type: string
          description: Email пользователя
          example: testuser@example.com
        fullname:
          maxLength: 255
          minLength: 0
          type: string
          description: Полное имя пользователя
          example: John Doe
        password:
          maxLength: 20
          minLength: 8
          type: string
          description: Пароль пользователя
          example: password123
      description: DTO для регистрации и входа пользователя
    UserDTO:
      type: object
      properties:
        email:
          type: string
          description: Email пользователя
          example: testuser@example.com
        fullName:
          type: string
          description: Полное имя пользователя
          example: John Doe
        role:
          type: string
          description: Роль пользователя
          example: USER
          enum:
            - ROLE_USER
            - ROLE_ADMIN
      description: DTO для представления информации о пользователе
    RefreshTokenDto:
      required:
        - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh-токен для обновления JWT
          example: dGhpcy1pcy1hLXJlZnJlc2gtdG9rZW4=
      description: DTO для передачи refresh-токена для обновления JWT
    CardSetStatusResponseDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID карты
          format: int64
          example: 101
        status:
          type: string
          description: Статус карты
          example: ACTIVE
          enum:
            - ACTIVE
            - BLOCK
            - EXPIRED
        blockRequestStatus:
          type: string
          description: Статус запроса на блокировку
          example: PENDING
          enum:
            - NONE
            - PENDING
            - APPROVED
            - REJECTED
      description: DTO для возврата результата изменения статуса карты
    CardResponseBlockDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID карты
          format: int64
          example: 101
        blockRequestStatus:
          type: string
          description: Статус запроса на блокировку
          example: PENDING
          enum:
            - NONE
            - PENDING
            - APPROVED
            - REJECTED
      description: DTO для возврата результата запроса на блокировку карты
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageUserDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        direction:
          type: string
        nullHandling:
          type: string
        ascending:
          type: boolean
        property:
          type: string
        ignoreCase:
          type: boolean
    PageCardDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDTO'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    CardResponseBalanceDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID карты
          format: int64
          example: 101
        balance:
          type: number
          description: Баланс карты
          example: 1000
      description: DTO для возврата баланса банковской карты
    CardEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: string
        user:
          $ref: '#/components/schemas/UserEntity'
        balance:
          type: number
        blockRequestStatus:
          type: string
          enum:
            - NONE
            - PENDING
            - APPROVED
            - REJECTED
        expiryDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCK
            - EXPIRED
    CardResponseRequestStatusDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID карты
          format: int64
          example: 101
        maskedNumber:
          type: string
          description: Маскированный номер карты
          example: '**** **** **** 1234'
        user:
          $ref: '#/components/schemas/UserEntity'
        blockRequestStatus:
          type: string
          description: Статус запроса на блокировку
          example: PENDING
          enum:
            - NONE
            - PENDING
            - APPROVED
            - REJECTED
        status:
          type: string
          description: Статус карты
          example: ACTIVE
          enum:
            - ACTIVE
            - BLOCK
            - EXPIRED
      description: DTO для возврата статуса запроса на блокировку карты с информацией о пользователе
    PageCardResponseRequestStatusDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardResponseRequestStatusDTO'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    UserEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        fullName:
          type: string
        password:
          type: string
        cardEntities:
          type: array
          items:
            $ref: '#/components/schemas/CardEntity'
        role:
          type: string
          enum:
            - ROLE_USER
            - ROLE_ADMIN
      description: Информация о пользователе-владельце карты
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
